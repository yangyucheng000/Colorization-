# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""Network."""
import mindspore
import mindspore.nn as nn
from mindspore.common.initializer import initializer
from .initializer import XavierNormal


class ColorizationModel(nn.Cell):
    """
    Network.

    Inputs:
        - **input_l** (tensor) - Tensor generated by L channel of input images.

    OutPuts:
        Infer output tensor.

    Examples:
        >>> net = ColorizationModel()

    """

    def __init__(self):
        super(ColorizationModel, self).__init__()
        weight_init = XavierNormal(gain=1.0)
        self.model = nn.SequentialCell()
        self.model.append(nn.Conv2d(1, 64, kernel_size=3, stride=1, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [64], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(64, 64, kernel_size=3, stride=2, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [64], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.BatchNorm2d(64))

        self.model.append(nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [128], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(128, 128, kernel_size=3, stride=2, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [128], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.BatchNorm2d(128))

        self.model.append(nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [256], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [256], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(256, 256, kernel_size=3, stride=2, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [256], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.BatchNorm2d(256))

        self.model.append(nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, pad_mode="pad", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.BatchNorm2d(512))

        self.model.append(nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, pad_mode="pad",
                                    has_bias=True, weight_init=weight_init,
                                    bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, pad_mode="pad",
                                    has_bias=True, weight_init=weight_init,
                                    bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, pad_mode="pad",
                                    has_bias=True, weight_init=weight_init,
                                    bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.BatchNorm2d(512))

        self.model.append(nn.ReLU())
        self.model.append(
            nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, pad_mode="pad", has_bias=True,
                      weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(
            nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, pad_mode="pad", has_bias=True,
                      weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(
            nn.Conv2d(512, 512, kernel_size=3, dilation=2, stride=1, padding=2, pad_mode="pad", has_bias=True,
                      weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.BatchNorm2d(512))

        self.model.append(
            nn.Conv2d(512, 512, kernel_size=3, dilation=1, stride=1, padding=1, pad_mode="pad", has_bias=True,
                      weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(
            nn.Conv2d(512, 512, kernel_size=3, dilation=1, stride=1, padding=1, pad_mode="pad", has_bias=True,
                      weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(
            nn.Conv2d(512, 512, kernel_size=3, dilation=1, stride=1, padding=1, pad_mode="pad", has_bias=True,
                      weight_init=weight_init, bias_init=initializer(0.1, [512], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.BatchNorm2d(512))

        self.model.append(
            nn.Conv2dTranspose(512, 256, kernel_size=4, dilation=1, stride=2, padding=1, pad_mode="pad",
                               has_bias=True, weight_init=weight_init,
                               bias_init=initializer(0.1, [256], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(
            nn.Conv2d(256, 256, kernel_size=3, dilation=1, stride=1, padding=1, pad_mode="pad", has_bias=True,
                      weight_init=weight_init, bias_init=initializer(0.1, [256], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(
            nn.Conv2d(256, 256, kernel_size=3, dilation=1, stride=1, padding=1, pad_mode="pad",
                      has_bias=True, weight_init=weight_init, bias_init=initializer(0.1, [256], mindspore.float32)))
        self.model.append(nn.ReLU())
        self.model.append(nn.Conv2d(256, 313, kernel_size=1, dilation=1, stride=1, pad_mode="valid", has_bias=True,
                                    weight_init=weight_init, bias_init=initializer(0.1, [313], mindspore.float32)))

    def construct(self, input_l):
        """ build network """
        features = self.model(input_l) / 0.38
        return features
